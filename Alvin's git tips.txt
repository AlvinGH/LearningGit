==================================================================================================
git config
		git config --[system|global|local] <section>.<key> <value> : 设置git 配置文件
==================================================================================================
git diff 
		git diff : stage & work
		git diff HEAD : work & repo
		git diff --cached/--staged : stage & repo
==================================================================================================
git reset
		git reset HEAD（git reset）: 重置stage，用repo内容重置stage,work不影响
		git reset -- filename : 仅重置stage中的指定文件	
		git reset --soft <rev> : stage和work不受影响, repo回到指定版本rev
		git reset --mixed <rev>(git reset default) : work 不变，repo & stage回退到指定rev
		git reset --hard <rev> : repo，work & stage回退到指定rev


==================================================================================================
git checkout
		git checkout [HEAD] : 汇总显示work，stage 及 repo 的差异
		git checkout -- [path] : 从stage 中检出文件到work
		git checkout <commit>  -- [path] : 从repo 中检出文件覆盖 stage和work
		git checkout <branch> : 切换HEAD到branch分支
		git checkout -b <new_branch> : 生成并切换到new_branch




		git checkout . / git checkout -- <file> : 用stage中的文件，覆盖work中的文件
		

		git checkout HEAD .  / git checkout HEAD <file> : 用HEAD指向的文件，覆盖work 和stage中的文件
		
==================================================================================================
git rm
		git rm --cached <file>: 从stage中删除文件，work不影响
==================================================================================================
git cat-file 
		git cat-file [-p] <shaID> : 显示shaID对应的对象内容

==================================================================================================
git commit
		git commit --allow-empty : 进行一次空提交（无文件修改）
		git commit --amend : 修改最近一次提交的log
==================================================================================================
git clone
		git clone <repo> <dir> : 从repo中克隆版本库及工作区（会检出文件）到dir下
		git clone --bare <repo> <dir.git> : 克隆裸库（不包含文件检出，仅包含版本库，
		                                    一般这样的库命名为name.git） 
		git clone --mirror <repo> <dir.git> : 克隆裸版本库，但此版本库与原版本库建立注册，可以使用
											  git fetch 进行同 

==================================================================================================
git fsck : 显示对象文件被引用情况
		
==================================================================================================
git prune : 清理对象库中未引用的对象文件（可节省空间）
==================================================================================================
git gc : 清理仓库文件
		  1.对 .git/refs下的文件进行打包，打包文件在.git/packed-refs中
		  2.丢弃90天前的reflog记录
		  3.对松散对象打包
		  4.清理未被关联的对象（默认为2周以前的）
		  5.其他清理
==================================================================================================
git log:
		git log --stat : 显示详细的log信息
==================================================================================================
git blame ： 文件追溯
		git blame <file> : 追溯file文件历史
==================================================================================================
git pull : 
		   1.获取远程库的最新提交（git fetch），江获取的提交与本地提交合并（git merge）

		   git pull = git  fetch + git merge
==================================================================================================
git tag : 创建里程碑
		git tag -m <msg>  <tagName>  [<rev>] : 为rev提交名字为tagName的里程碑，并附带说明msg
		(git cat-file -p <tag> : 显示tag对应的提交信息) 
		git tag -d <tagName> : 删除tagName
		推送tag 到远程库：
							git push origin <tagName> （推送指定tag）
							git push origin ref/tags/*（推送本地所有tag）
==================================================================================================

		
