==================================================================================================
git config
		git config --[system|global|local] <section>.<key> <value> : 设置git 配置文件
==================================================================================================
git diff 
		git diff : stage & work
		git diff HEAD : work & repo
		git diff --cached/--staged : stage & repo
==================================================================================================
git reset
		git reset HEAD（git reset）: 重置stage，用repo内容重置stage,work不影响
		git reset -- filename : 仅重置stage中的指定文件	
		git reset --soft <rev> : stage和work不受影响, repo回到指定版本rev
		git reset --mixed <rev>(git reset default) : work 不变，repo & stage回退到指定rev
		git reset --hard <rev> : repo，work & stage回退到指定rev


==================================================================================================
git checkout
		git checkout [HEAD] : 汇总显示work，stage 及 repo 的差异
		git checkout -- [path] : 从stage 中检出文件到work
		git checkout <commit>  -- [path] : 从repo 中检出文件覆盖 stage和work
		git checkout <branch> : 切换HEAD到branch分支
		git checkout -b <new_branch> : 生成并切换到new_branch

		git checkout . / git checkout -- <file> : 用stage中的文件，覆盖work中的文件

		git checkout HEAD .  / git checkout HEAD <file> : 用HEAD指向的文件，覆盖work 和stage中的文件
		
==================================================================================================
git rm
		git rm --cached <file>: 从stage中删除文件，work不影响
==================================================================================================
git cat-file 
		git cat-file [-p] <shaID> : 显示shaID对应的对象内容

==================================================================================================
git push 总是要输入账号密码：
							git config --global credential.helper store

==================================================================================================
git 忽略权限改动：
							git config core.filemode false
==================================================================================================
工作区暂存：
		git stash
			
==================================================================================================
git status:
		git status -s : 已类似于SVN的形式，显示文件修改状态
		git status --ignored ： 显示已被忽略的文件状态
==================================================================================================
git branch
			1.Bug分支
			2.特性分支
==================================================================================================
.git :

	   HEAD : 文件,指向当先分支
	  index : 文件,暂存区信息
	 objects： 目录，所有数据内容
	   refs : 目录，指向数据（分支）的提交对象的指针
-------------------------------------------------
      config : 本地配置文件
       info ： 全局排除文件
      hooks ： 钩子脚本

git object

       bold object : 数据对象，存储文件内容
       tree object : 树对象，存储目录及文件名
     commit object : 提交对象

     git add ： 将被改写的文件存储为数据对象（bold），更新暂存区
     git commit ： 记录树对象，创建一个顶层树对象（tree），和父对象的提交对象（commit）

git ref : SHA1 值的可读名字

git barnch : 一个指向一系列（commit 链表）之首的指针或引用


HEAD : 符号引用，内容为.git/refs/heads/* ，指向当前分支 




==================================================================================================
==================================================================================================



		
